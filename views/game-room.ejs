<!DOCTYPE html>
<html lang="en">

    <head>
        <title>Game Room</title>
        <link rel="stylesheet" href="/css/game-room.css" type="text/css">
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
        <script src="https://kit.fontawesome.com/07b8d94df6.js" crossorigin="anonymous"></script>
    </head>

    <body>
        <h1>Game Room</h1>

        <!-- Leave -->
        <a href="http://localhost:3000/room-list">Leave</a>

        <!-- Player List -->
        <ul class="player-list" id="player-list">

        </ul>

        <!-- Game Information -->
        <div class="information">
            <% for(var gameRoom of room) { %>
                <h1>Room Name: <%=gameRoom.RoomName%></h1>
                <h1>Game Mode: <%=gameRoom.GameMode%></h1>
                <h1>Current Game: <%=gameRoom.CurrentGame%></h1>
                <h1>Players: <%=gameRoom.PlayerCount%>/<%=gameRoom.PlayerCapacity%></h1>
            <% }%>
        </div>

        <!-- Chat Box -->
        <div class="chat-box">
            <h1>Chat</h1>
            <ul id="message-container" class="messages" style="padding-left: 2%; display: flex; flex-direction: column-reverse">

            </ul>
            <form id="send-container" class="chat-input">
                <label><input type="text" id="message-input" placeholder="Message..."></label>
                <button type="submit" id="send-button">Send</button>
            </form>
        </div>

        <div id="gameOver">
            <h2>Winner: <h2 id="title"></h2></h2>
            <button onclick="Restart_Game()" class="start-btn" id="playAgain-btn">PLAY AGAIN?</button>
        </div>

        <canvas id="game-window" class="game-window"  width="1024" height="576" style=" border: 1px solid #000000;"></canvas>

        <script src="/socket.io/socket.io.js"></script>
        <script defer src="http://localhost:3000/socket.io/socket.io.js"></script>

        <script>
            // things
            const socket = io('http://localhost:3000');
            const messageForm = document.getElementById('send-container');
            const messageContainer = document.getElementById('message-container');
            const messageInput = document.getElementById('message-input');
            const username = "<%=user.Username%>";
            const roomID = "<%=gameRoom.ID%>";

            // Message
            socket.emit('new-user', username);

            socket.on('chat-message', data => {
                addMessage(`${data.username}: ${data.message}`);
            })

            // New User Joined or left
            socket.on('user-connected', name => {
                addMessage(`${name} connected`);
            })

            socket.on('user-disconnected', name => {
                addMessage(`${name} disconnected`);
            })

            messageForm.addEventListener('submit', e => {
                e.preventDefault();
                const message = messageInput.value;
                socket.emit('send-chat-message', message);
                messageInput.value = '';
            })

            function addMessage(message) {
                const messageElement = "<li>"+ message +"</li>";
                var newContent = messageElement + document.getElementById("message-container").innerHTML
                document.getElementById("message-container").innerHTML = newContent;
            }
        </script>

        <script>

            function Restart_Game() {
                var restart_menu = document.getElementById("gameOver");
                restart_menu.style.visibility = "hidden";
                socket.emit('pauseTheGame');
            }

            var HEIGHT = 576;
            var WIDTH = 1024;

            var Img = {};
            Img.player = new Image();
            Img.player.src = '../img/hero.png';
            Img.bullet = new Image();
            Img.bullet.src = '../img/ninjastar.png';
            Img.map = new Image();
            Img.map.src = '../img/purple-sky.png';

            var ctx = document.getElementById("game-window").getContext("2d");
            ctx.font = '30px Arial';

            var Player = function(initPack){
                var self = {};
                self.id = initPack.id;
                self.number = initPack.number;
                self.x = initPack.x;
                self.y = initPack.y;
                self.hp = initPack.hp;
                self.hpMax = initPack.hpMax;
                self.score = initPack.score;


                self.draw = function(){
                    var hpWidth = 50 * self.hp / self.hpMax;
                    ctx.fillStyle = 'red';
                    ctx.fillRect(self.x - hpWidth/2,self.y - 40,hpWidth,4);

                    var width = Img.player.width;
                    var height = Img.player.height;

                    ctx.drawImage(Img.player,
                        0,0,Img.player.width,Img.player.height,
                        self.x-width/2,self.y-height/2,width,height);

                }

                Player.list[self.id] = self;
                return self;
            }
            Player.list = {};

            var Bullet = function(initPack){
                var self = {};
                self.id = initPack.id;
                self.x = initPack.x;
                self.y = initPack.y;

                self.draw = function(){
                    var width = Img.bullet.width*1.5;
                    var height = Img.bullet.height*1.5;

                    ctx.drawImage(Img.bullet,
                        0,0,Img.bullet.width,Img.bullet.height,
                        self.x-width/2,self.y-height/2,width,height);
                }

                Bullet.list[self.id] = self;
                return self;
            }
            Bullet.list = {};

            var selfId = null;


            socket.on('gameOver', function(data){
                var gameover_menu = document.getElementById("gameOver");
                document.getElementById("title").innerHTML = data;
                gameover_menu.style.visibility = "visible";
            });

            socket.on('init',function(data){
                if(data.selfId !== undefined){
                    selfId = data.selfId;
                }
                //{ player : [{id:123,number:'1',x:0,y:0},{id:1,number:'2',x:0,y:0}], bullet: []}
                for(var i = 0 ; i < data.player.length; i++){
                    new Player(data.player[i]);
                }
                for(var i = 0 ; i < data.bullet.length; i++){
                    new Bullet(data.bullet[i]);
                }
            });


            socket.on('update',function(data){
                //{ player : [{id:123,x:0,y:0},{id:1,x:0,y:0}], bullet: []}
                for(var i = 0 ; i < data.player.length; i++){
                    var pack = data.player[i];
                    var p = Player.list[pack.id];
                    if(p){
                        if(pack.x !== undefined)
                            p.x = pack.x;
                        if(pack.y !== undefined)
                            p.y = pack.y;
                        if(pack.hp !== undefined)
                            p.hp = pack.hp;
                        if(pack.score !== undefined)
                            p.score = pack.score;
                    }
                }
                for(var i = 0 ; i < data.bullet.length; i++){
                    var pack = data.bullet[i];
                    var b = Bullet.list[data.bullet[i].id];
                    if(b){
                        if(pack.x !== undefined)
                            b.x = pack.x;
                        if(pack.y !== undefined)
                            b.y = pack.y;
                    }
                }
            });

            socket.on('remove',function(data){
                //{player:[12323],bullet:[12323,123123]}
                for(var i = 0 ; i < data.player.length; i++){
                    delete Player.list[data.player[i]];
                }
                for(var i = 0 ; i < data.bullet.length; i++){
                    delete Bullet.list[data.bullet[i]];
                }
            });


            setInterval(function(){
                ctx.clearRect(0,0,1024,576);
                drawMap();
                drawScore();
                for(var i in Player.list)
                    Player.list[i].draw();
                for(var i in Bullet.list)
                    Bullet.list[i].draw();
            },40);

            var drawMap = function(){
                ctx.drawImage(Img.map, 0, 0);
            }

            var drawScore = function(){
                ctx.fillStyle = 'white';
                ctx.fillText("Score: " + Player.list[selfId].score, 10, 30);
            }

            document.onkeydown = function(event){
                if(event.keyCode === 68)    //d
                    socket.emit('keyPress',{inputId:'right',state:true});
                else if(event.keyCode === 83)   //s
                    socket.emit('keyPress',{inputId:'down',state:true});
                else if(event.keyCode === 65) //a
                    socket.emit('keyPress',{inputId:'left',state:true});
                else if(event.keyCode === 87) // w
                    socket.emit('keyPress',{inputId:'up',state:true});

            }
            document.onkeyup = function(event){
                if(event.keyCode === 68)    //d
                    socket.emit('keyPress',{inputId:'right',state:false});
                else if(event.keyCode === 83)   //s
                    socket.emit('keyPress',{inputId:'down',state:false});
                else if(event.keyCode === 65) //a
                    socket.emit('keyPress',{inputId:'left',state:false});
                else if(event.keyCode === 87) // w
                    socket.emit('keyPress',{inputId:'up',state:false});
            }

            document.onmousedown = function(event){
                socket.emit('keyPress',{inputId:'attack',state:true});

            }
            document.onmouseup = function(event){
                socket.emit('keyPress',{inputId:'attack',state:false});
            }
            document.onmousemove = function(event){
                var x = -250 + event.clientX - 8;
                var y = -250 + event.clientY - 8;
                var angle = Math.atan2(y,x) / Math.PI * 180;
                socket.emit('keyPress',{inputId:'mouseAngle',state:angle});
            }
        </script>
    </body>
</html>